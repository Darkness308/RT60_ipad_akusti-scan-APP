name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: macos-13
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.2'
    
    - name: Cache DerivedData
      uses: actions/cache@v4
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-dd-${{ hashFiles('**/*.swift','**/*.xcodeproj','**/Package.resolved') }}
    
    - name: Install Tools
      run: brew install swiftlint swiftformat || true
    
    - name: Lint
      run: swiftlint --strict || true
    
    - name: Format Check
      run: swiftformat --lint . || true
    
    - name: Clean build cache
      run: |
        cd AcoustiScanConsolidated
        swift package clean
    
    - name: Resolve Dependencies
      run: |
        cd AcoustiScanConsolidated
        swift package resolve
    
    - name: Build AcoustiScan Consolidated
      run: |
        cd AcoustiScanConsolidated
        swift build
    
    - name: Run Tests
      run: |
        cd AcoustiScanConsolidated
        swift test
    
    - name: Build Key-Coverage Linter
      run: |
        chmod +x Tools/linters/report_key_coverage.swift
        # Swift shebang script – kein separater Build nötig, direkt ausführbar

    - name: Run Key-Coverage Linter (HTML)
      run: |
        # Beispiel: nutze dein Sample-Model; füge hier weitere Models hinzu
        Tools/linters/report_key_coverage.swift Tools/reporthtml/sample.report.model.json

    - name: Generate HTML report artifact
      run: |
        mkdir -p Artifacts
        swiftc -o reporthtml Tools/reporthtml/main.swift
        ./reporthtml Tools/reporthtml/sample.report.model.json -o Artifacts/report.html
    
    - name: Upload HTML Artifact
      uses: actions/upload-artifact@v4
      with:
        name: html-report
        path: Artifacts/report.html