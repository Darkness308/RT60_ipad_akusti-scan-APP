name: Swift Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering

env:
  MAX_RETRY_ATTEMPTS: 3
  XCODE_VERSION: '15.2'

jobs:
  build:
    runs-on: macos-13
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v4
    
    - uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
    
    - name: Clean and build AcoustiScanConsolidated with retry
      id: build_acoustiscan
      run: |
        set +e  # Don't exit on error
        cd AcoustiScanConsolidated
        swift package clean
        
        attempt=1
        while [ $attempt -le ${{ env.MAX_RETRY_ATTEMPTS }} ]; do
          echo "üî® AcoustiScan build attempt $attempt of ${{ env.MAX_RETRY_ATTEMPTS }}"
          swift build -v
          build_result=$?
          if [ $build_result -eq 0 ]; then
            echo "‚úÖ AcoustiScan built successfully on attempt $attempt"
            break
          fi
          echo "‚ö†Ô∏è AcoustiScan build failed on attempt $attempt"
          if [ $attempt -eq ${{ env.MAX_RETRY_ATTEMPTS }} ]; then
            echo "‚ùå AcoustiScan build failed after ${{ env.MAX_RETRY_ATTEMPTS }} attempts"
            echo "acoustiscan_build_failed=true" >> $GITHUB_OUTPUT
            exit 1
          fi
          attempt=$((attempt + 1))
          sleep 2
        done
        cd ..

    - name: Test AcoustiScanConsolidated with retry
      id: test_acoustiscan
      run: |
        set +e  # Don't exit on error
        cd AcoustiScanConsolidated
        
        attempt=1
        while [ $attempt -le ${{ env.MAX_RETRY_ATTEMPTS }} ]; do
          echo "üß™ AcoustiScan test attempt $attempt of ${{ env.MAX_RETRY_ATTEMPTS }}"
          swift test -v
          test_result=$?
          if [ $test_result -eq 0 ]; then
            echo "‚úÖ AcoustiScan tests passed on attempt $attempt"
            break
          fi
          echo "‚ö†Ô∏è AcoustiScan tests failed on attempt $attempt"
          if [ $attempt -eq ${{ env.MAX_RETRY_ATTEMPTS }} ]; then
            echo "‚ùå AcoustiScan tests failed after ${{ env.MAX_RETRY_ATTEMPTS }} attempts"
            echo "acoustiscan_tests_failed=true" >> $GITHUB_OUTPUT
            exit 1
          fi
          attempt=$((attempt + 1))
          sleep 2
        done
        cd ..

    - name: Build Export Module with retry
      id: build_export
      run: |
        set +e  # Don't exit on error
        cd Modules/Export
        
        attempt=1
        while [ $attempt -le ${{ env.MAX_RETRY_ATTEMPTS }} ]; do
          echo "üî® Export module build attempt $attempt of ${{ env.MAX_RETRY_ATTEMPTS }}"
          swift build -v
          build_result=$?
          if [ $build_result -eq 0 ]; then
            echo "‚úÖ Export module built successfully on attempt $attempt"
            break
          fi
          echo "‚ö†Ô∏è Export module build failed on attempt $attempt"
          if [ $attempt -eq ${{ env.MAX_RETRY_ATTEMPTS }} ]; then
            echo "‚ùå Export module build failed after ${{ env.MAX_RETRY_ATTEMPTS }} attempts"
            echo "export_build_failed=true" >> $GITHUB_OUTPUT
            exit 1
          fi
          attempt=$((attempt + 1))
          swift package clean  # Clean between attempts
          sleep 2
        done
        cd ../..

    - name: Test Export Module with retry
      id: test_export
      run: |
        set +e  # Don't exit on error
        cd Modules/Export
        
        attempt=1
        while [ $attempt -le ${{ env.MAX_RETRY_ATTEMPTS }} ]; do
          echo "üß™ Export module test attempt $attempt of ${{ env.MAX_RETRY_ATTEMPTS }}"
          swift test -v
          test_result=$?
          if [ $test_result -eq 0 ]; then
            echo "‚úÖ Export module tests passed on attempt $attempt"
            break
          fi
          echo "‚ö†Ô∏è Export module tests failed on attempt $attempt"
          if [ $attempt -eq ${{ env.MAX_RETRY_ATTEMPTS }} ]; then
            echo "‚ùå Export module tests failed after ${{ env.MAX_RETRY_ATTEMPTS }} attempts"
            echo "export_tests_failed=true" >> $GITHUB_OUTPUT
            exit 1
          fi
          attempt=$((attempt + 1))
          sleep 2
        done
        cd ../..
    
    - name: Create success summary
      if: success()
      run: |
        echo "üéâ All builds and tests completed successfully!"
        echo "‚úÖ AcoustiScanConsolidated: Built and tested"
        echo "‚úÖ Export Module: Built and tested"
        
    - name: Report failures
      if: failure()
      run: |
        echo "‚ùå Swift build and test workflow failed"
        echo "Check the specific step outputs for detailed error information"
        [ "${{ steps.build_acoustiscan.outputs.acoustiscan_build_failed }}" = "true" ] && echo "- AcoustiScan build failed"
        [ "${{ steps.test_acoustiscan.outputs.acoustiscan_tests_failed }}" = "true" ] && echo "- AcoustiScan tests failed" 
        [ "${{ steps.build_export.outputs.export_build_failed }}" = "true" ] && echo "- Export module build failed"
        [ "${{ steps.test_export.outputs.export_tests_failed }}" = "true" ] && echo "- Export module tests failed"